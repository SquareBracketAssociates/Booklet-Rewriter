'From Pharo8.0.0 of 21 June 2019 [Build information: Pharo-8.0.0+build.371.sha.421d594d22e0aae39a1e2188ec18ca9f416fed27 (64 Bit)] on 21 June 2019 at 5:22:22.293855 pm'!Object subclass: #MyRewriter	instanceVariableNames: ''	classVariableNames: ''	package: 'BlueInk-Enlumineur-Core'!!MyRewriter methodsFor: 'as yet unclassified'!searchPattern	^ '`selector| expr source |expr := RBParser parseExpression:  `#input.configurationSelector := `#configuration.`@.st1.self assert: source equals: `#output'! !!MyRewriter methodsFor: 'as yet unclassified'!targetPattern	^ '`selector| source |configurationSelector := `#configuration.source := self formatExpression:  `#input.self assert: source equals: `#output'! !!MyRewriter methodsFor: 'as yet unclassified'!rewriteAllCodeOfSubclassOf: aRoot	"self new rewriteAllCodeOfSubclassOf: BISingleExpressionTest"		aRoot withAllSubclassesDo: [ :cl | self rewriteAllTestsMethodOf: cl ]! !!MyRewriter methodsFor: 'as yet unclassified'!rewrite: aCompiledMethod	"self new rewrite"	| rewriter ok |	rewriter := RBParseTreeRewriter new.	rewriter replaceMethod: self searchPattern with: self targetPattern.	ok := rewriter executeTree: aCompiledMethod parseTree.	ok ifFalse: [ ^ 'did not work' ].	Author 		useAuthor: 'Refactoring'		during: [  			aCompiledMethod origin 				compile: rewriter tree formattedCode 				classified: aCompiledMethod protocol ]! !!MyRewriter methodsFor: 'as yet unclassified'!rewrite 	"self new rewrite"	| rewriter ok method |	rewriter := RBParseTreeRewriter new.	rewriter replaceMethod: self searchPattern with: self targetPattern.	method := (BIArrayExpressionTest>>#testNoExtraSpaceAroundPeriod).	ok := rewriter executeTree: method parseTree.	ok ifFalse: [ ^ 'did not work' ].	Author 		useAuthor: 'Refactoring'		during: [  			method origin 				compile: rewriter tree formattedCode 				classified: method protocol ]! !!MyRewriter methodsFor: 'as yet unclassified'!rewriteAllTestsMethodOf: aClass	"self new rewriteAllTestsMethodOf: BIAssignmentExpressionTest"		| testSelectors |	testSelectors := aClass selectors select: [ :each | 'test*' match: each  ].	testSelectors do: [ :s | self rewrite: aClass >> s ]! !